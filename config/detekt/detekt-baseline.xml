<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>ComplexCondition:NewsDetailsScreen.kt$WebViewFeature.isFeatureSupported(WebViewFeature.FORCE_DARK) &amp;&amp; WebViewFeature.isFeatureSupported( WebViewFeature.ALGORITHMIC_DARKENING ) &amp;&amp; isDarkMode &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.Q</ID>
    <ID>EmptyDefaultConstructor:VLRapp.kt$VLRapp$()</ID>
    <ID>EmptyDefaultConstructor:VlrFirebaseNotificationService.kt$VlrFirebaseNotificationService$()</ID>
    <ID>FunctionNaming:AboutScreen.kt$@Composable fun AboutScreen()</ID>
    <ID>FunctionNaming:AboutScreen.kt$@Composable fun AndroidCard(modifier: Modifier = Modifier)</ID>
    <ID>FunctionNaming:AboutScreen.kt$@Composable fun BackendCard(modifier: Modifier = Modifier)</ID>
    <ID>FunctionNaming:AboutScreen.kt$@Composable fun FeedbackCard(modifier: Modifier = Modifier)</ID>
    <ID>FunctionNaming:AboutScreen.kt$@Composable fun VersionFooter(currentAppVersion: String, simpleEasterEgg: Boolean)</ID>
    <ID>FunctionNaming:CaptureBitmapComposable.kt$@Composable fun CaptureBitmap( captureRequestKey: Boolean, content: @Composable () -&gt; Unit, onBitmapCaptured: (Bitmap) -&gt; Unit )</ID>
    <ID>FunctionNaming:DateChip.kt$@Composable fun DateChip(modifier: Modifier = Modifier, date: String)</ID>
    <ID>FunctionNaming:DomainVerificationUi.kt$@Composable fun DomainVerificationUi( modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:ErrorUi.kt$@Composable fun ErrorDialog(modifier: Modifier, message: String, onDismiss: (Boolean) -&gt; Unit)</ID>
    <ID>FunctionNaming:ErrorUi.kt$@Composable fun ErrorUi(modifier: Modifier, exceptionMessage: String)</ID>
    <ID>FunctionNaming:EventDetailsScreen.kt$@Composable fun EventDetails(viewModel: VlrViewModel, id: String)</ID>
    <ID>FunctionNaming:EventDetailsScreen.kt$@Composable fun EventDetailsTeamSlider( modifier: Modifier = Modifier, list: StableHolder&lt;List&lt;TournamentDetails.Participant&gt;&gt;, onClick: (String) -&gt; Unit )</ID>
    <ID>FunctionNaming:EventDetailsScreen.kt$@Composable fun EventMatchGroups( modifier: Modifier = Modifier, selectedIndex: Int, group: StableHolder&lt;Map&lt;String, List&lt;TournamentDetails.Games&gt;&gt;&gt;, tabSelection: Int, onFilterChange: (Int) -&gt; Unit, onTabChange: (Int) -&gt; Unit )</ID>
    <ID>FunctionNaming:EventDetailsScreen.kt$@Composable fun FilterChips( modifier: Modifier, filterOptions: List&lt;String&gt;, selectedIndex: Int, onFilterChange: (Int) -&gt; Unit )</ID>
    <ID>FunctionNaming:EventDetailsScreen.kt$@Composable fun TournamentDetailsHeader( modifier: Modifier = Modifier, tournamentDetails: TournamentDetails, isTracked: Boolean, onSubButton: suspend () -&gt; Unit )</ID>
    <ID>FunctionNaming:EventDetailsScreen.kt$@Composable fun TournamentMatchOverview( modifier: Modifier = Modifier, game: TournamentDetails.Games, onClick: (String) -&gt; Unit )</ID>
    <ID>FunctionNaming:EventOverviewScreen.kt$@Composable fun EventScreen(viewModel: VlrViewModel)</ID>
    <ID>FunctionNaming:EventOverviewScreen.kt$@Composable fun NoEventUI(modifier: Modifier = Modifier)</ID>
    <ID>FunctionNaming:EventOverviewScreen.kt$@Composable fun TournamentPreview( modifier: Modifier = Modifier, tournamentPreview: TournamentPreview, action: Action )</ID>
    <ID>FunctionNaming:EventOverviewScreen.kt$@Composable fun TournamentPreviewContainer( modifier: Modifier = Modifier, action: Action, list: StableHolder&lt;List&lt;TournamentPreview&gt;&gt;, swipeRefresh: PullRefreshState, updateState: Result&lt;Boolean, Throwable?&gt;, resetScroll: Boolean, postResetScroll: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:MatchDetailsScreen.kt$@Composable fun MapBox(modifier: Modifier = Modifier, matchInfo: MatchInfo, onPlayerClick: (String) -&gt; Unit)</ID>
    <ID>FunctionNaming:MatchDetailsScreen.kt$@Composable fun MapStatsCard( modifier: Modifier = Modifier, mapData: MatchInfo.MatchDetailData, toggleState: Boolean, onClick: (Boolean) -&gt; Unit, onPlayerClick: (String) -&gt; Unit )</ID>
    <ID>FunctionNaming:MatchDetailsScreen.kt$@Composable fun MatchLiveUi(modifier: Modifier = Modifier)</ID>
    <ID>FunctionNaming:MatchDetailsScreen.kt$@Composable fun MatchOverallAndEventOverview( modifier: Modifier = Modifier, detailData: MatchInfo, onClick: (String) -&gt; Unit, )</ID>
    <ID>FunctionNaming:MatchDetailsScreen.kt$@Composable fun MatchStatusUi(modifier: Modifier, state: String, date: String?)</ID>
    <ID>FunctionNaming:MatchDetailsScreen.kt$@Composable fun NewMatchDetails(viewModel: VlrViewModel, id: String)</ID>
    <ID>FunctionNaming:MatchOverviewScreen.kt$@Composable fun MatchOverview(viewModel: VlrViewModel)</ID>
    <ID>FunctionNaming:MatchOverviewScreen.kt$@Composable fun MatchOverviewContainer( modifier: Modifier = Modifier, list: StableHolder&lt;List&lt;MatchPreviewInfo&gt;&gt;, swipeRefresh: PullRefreshState, updateState: Result&lt;Boolean, Throwable?&gt;, resetScroll: Boolean, onClick: (String) -&gt; Unit, postResetScroll: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:MatchOverviewScreen.kt$@Composable fun MatchOverviewPreview( modifier: Modifier = Modifier, matchPreviewInfo: MatchPreviewInfo, shareMode: Boolean, isSelected: Boolean, onAction: (Boolean, MatchPreviewInfo) -&gt; Unit, )</ID>
    <ID>FunctionNaming:MatchOverviewScreen.kt$@Composable fun NoMatchUI(modifier: Modifier = Modifier)</ID>
    <ID>FunctionNaming:MatchScoreUi.kt$@Composable fun RoundBox(modifier: Modifier, round: MatchInfo.MatchDetailData.Rounds)</ID>
    <ID>FunctionNaming:MatchScoreUi.kt$@Composable fun RoundByRoundRow(modifier: Modifier, rounds: List&lt;MatchInfo.MatchDetailData.Rounds&gt;)</ID>
    <ID>FunctionNaming:MatchScoreUi.kt$@Composable fun ScoreBox(modifier: Modifier = Modifier, mapData: MatchInfo.MatchDetailData)</ID>
    <ID>FunctionNaming:MoreDetailsDialogUi.kt$@Composable fun MatchMoreDetailsDialog( modifier: Modifier = Modifier, detailData: MatchInfo, open: Boolean, onDismiss: (Boolean) -&gt; Unit )</ID>
    <ID>FunctionNaming:MoreOptionsUi.kt$@Composable fun MatchInfoMoreOptions( detailData: MatchInfo, isTracked: Boolean, eventId: String, onSubButton: suspend () -&gt; Unit, onEventClick: (String) -&gt; Unit, )</ID>
    <ID>FunctionNaming:NewsDetailsScreen.kt$@Composable fun NewsDetailsScreen(viewModel: VlrViewModel, id: String)</ID>
    <ID>FunctionNaming:NewsOverviewScreen.kt$@Composable fun NewsItem(modifier: Modifier = Modifier, newsResponseItem: NewsResponseItem, action: Action)</ID>
    <ID>FunctionNaming:NewsOverviewScreen.kt$@Composable fun NewsScreen(viewModel: VlrViewModel)</ID>
    <ID>FunctionNaming:PlayerDetailsScreen.kt$@Composable fun AgentStatCombat(modifier: Modifier = Modifier, members: StableHolder&lt;List&lt;PlayerData.Agent&gt;&gt;)</ID>
    <ID>FunctionNaming:PlayerDetailsScreen.kt$@Composable fun AgentStatFirstBlood( modifier: Modifier = Modifier, members: StableHolder&lt;List&lt;PlayerData.Agent&gt;&gt; )</ID>
    <ID>FunctionNaming:PlayerDetailsScreen.kt$@Composable fun AgentStatKDA(modifier: Modifier = Modifier, members: StableHolder&lt;List&lt;PlayerData.Agent&gt;&gt;)</ID>
    <ID>FunctionNaming:PlayerDetailsScreen.kt$@Composable fun AgentStatOverall(modifier: Modifier = Modifier, members: StableHolder&lt;List&lt;PlayerData.Agent&gt;&gt;)</ID>
    <ID>FunctionNaming:PlayerDetailsScreen.kt$@Composable fun AgentStatViewPager( modifier: Modifier = Modifier, members: StableHolder&lt;List&lt;PlayerData.Agent&gt;&gt; )</ID>
    <ID>FunctionNaming:PlayerDetailsScreen.kt$@Composable fun PlayerDetailsScreen(viewModel: VlrViewModel, id: String)</ID>
    <ID>FunctionNaming:PlayerDetailsScreen.kt$@Composable fun PlayerHeaderUi(modifier: Modifier, playerData: PlayerData)</ID>
    <ID>FunctionNaming:PlayerDetailsScreen.kt$@Composable fun PreviousTeam(modifier: Modifier = Modifier, team: Team, action: Action)</ID>
    <ID>FunctionNaming:PlayerDetailsScreen.kt$@Composable fun RowScope.NameAndAgentDetail(modifier: Modifier = Modifier, name: String, img: String?)</ID>
    <ID>FunctionNaming:PreviousEncounterUi.kt$@Composable fun PreviousEncounter( modifier: Modifier = Modifier, previousEncounter: MatchInfo.Head2head, onClick: (String) -&gt; Unit )</ID>
    <ID>FunctionNaming:PreviousEncounterUi.kt$@Composable fun PreviousMatches( modifier: Modifier = Modifier, head2head: List&lt;MatchInfo.Head2head&gt;, onClick: (String) -&gt; Unit )</ID>
    <ID>FunctionNaming:RankScreen.kt$@Composable fun AnimatedProgressBar(modifier: Modifier = Modifier, show: Boolean)</ID>
    <ID>FunctionNaming:RankScreen.kt$@Composable fun NoTeamsUI(modifier: Modifier = Modifier)</ID>
    <ID>FunctionNaming:RankScreen.kt$@Composable fun RankScreen(viewModel: VlrViewModel)</ID>
    <ID>FunctionNaming:RankScreen.kt$@Composable fun RanksPreviewContainer( modifier: Modifier = Modifier, action: Action, list: StableHolder&lt;List&lt;TeamDetails&gt;&gt;, swipeRefresh: PullRefreshState, updateState: Result&lt;Boolean, Throwable?&gt;, resetScroll: Boolean, postResetScroll: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:RankScreen.kt$@Composable fun TeamRankPreview(modifier: Modifier = Modifier, team: TeamDetails, action: Action)</ID>
    <ID>FunctionNaming:ScrollStateResetHelper.kt$@Composable fun LazyListState.ScrollHelper(resetScroll: Boolean, postScroll: () -&gt; Unit)</ID>
    <ID>FunctionNaming:ShareMenuUi.kt$@Composable fun SharableListUi(modifier: Modifier = Modifier, matches: StableHolder&lt;List&lt;MatchPreviewInfo&gt;&gt;)</ID>
    <ID>FunctionNaming:ShareMenuUi.kt$@Composable fun SharableMatchUi(modifier: Modifier = Modifier, match: MatchPreviewInfo)</ID>
    <ID>FunctionNaming:ShareMenuUi.kt$@Composable fun ShareDialog(matches: StableHolder&lt;List&lt;MatchPreviewInfo&gt;&gt;, onDismiss: () -&gt; Unit)</ID>
    <ID>FunctionNaming:ShareMenuUi.kt$@Composable fun SharingAppBar( modifier: Modifier, items: List&lt;MatchPreviewInfo&gt;, shareMode: (Boolean) -&gt; Unit, shareConfirm: (Boolean) -&gt; Unit )</ID>
    <ID>FunctionNaming:StatsUi.kt$@Composable fun RowScope.PlayerNameAndAgentDetailWithHyperlink( modifier: Modifier = Modifier, name: String, img: String?, id: String, onClick: (String) -&gt; Unit )</ID>
    <ID>FunctionNaming:StatsUi.kt$@Composable fun StatCombat( modifier: Modifier = Modifier, members: StableHolder&lt;List&lt;MatchInfo.MatchDetailData.Member&gt;&gt;, onClick: (String) -&gt; Unit )</ID>
    <ID>FunctionNaming:StatsUi.kt$@Composable fun StatFirstBlood( modifier: Modifier = Modifier, members: StableHolder&lt;List&lt;MatchInfo.MatchDetailData.Member&gt;&gt;, onClick: (String) -&gt; Unit )</ID>
    <ID>FunctionNaming:StatsUi.kt$@Composable fun StatKDA( modifier: Modifier = Modifier, members: StableHolder&lt;List&lt;MatchInfo.MatchDetailData.Member&gt;&gt;, onClick: (String) -&gt; Unit )</ID>
    <ID>FunctionNaming:StatsUi.kt$@Composable fun StatTitle(text: String, modifier: Modifier = Modifier)</ID>
    <ID>FunctionNaming:StatsUi.kt$@Composable fun StatViewPager( modifier: Modifier = Modifier, members: StableHolder&lt;List&lt;MatchInfo.MatchDetailData.Member&gt;&gt;, onClick: (String) -&gt; Unit )</ID>
    <ID>FunctionNaming:StatsUi.kt$@Composable fun TeamName(team: String, modifier: Modifier = Modifier)</ID>
    <ID>FunctionNaming:SystemBarComposition.kt$@Composable fun SetStatusBarColor()</ID>
    <ID>FunctionNaming:SystemBarComposition.kt$@Composable fun StatusBarColorForHome()</ID>
    <ID>FunctionNaming:SystemBarComposition.kt$@Composable fun StatusBarColorForHomeWithTabs()</ID>
    <ID>FunctionNaming:TabIndicator.kt$@Composable fun VLRTabIndicator(indicators: List&lt;TabPosition&gt;, position: Int)</ID>
    <ID>FunctionNaming:TeamDetailsScreen.kt$@Composable fun GameOverviewPreview( modifier: Modifier = Modifier, matchPreviewInfo: TeamDetails.Games, team: String, onClick: (String) -&gt; Unit, )</ID>
    <ID>FunctionNaming:TeamDetailsScreen.kt$@Composable fun LazyItemScope.TeamMatchData( modifier: Modifier = Modifier, upcoming: StableHolder&lt;List&lt;TeamDetails.Games&gt;&gt;, completed: StableHolder&lt;List&lt;TeamDetails.Games&gt;&gt;, teamName: String, onClick: (String) -&gt; Unit )</ID>
    <ID>FunctionNaming:TeamDetailsScreen.kt$@Composable fun RosterCard( modifier: Modifier = Modifier, expanded: Boolean, data: StableHolder&lt;List&lt;TeamDetails.Roster&gt;&gt;, onExpand: (Boolean) -&gt; Unit, onClick: (String) -&gt; Unit, )</ID>
    <ID>FunctionNaming:TeamDetailsScreen.kt$@Composable fun TeamBanner( modifier: Modifier = Modifier, teamDetails: TeamDetails, id: String, isTracked: Boolean, onSubButton: suspend () -&gt; Unit )</ID>
    <ID>FunctionNaming:TeamDetailsScreen.kt$@Composable fun TeamScreen(viewModel: VlrViewModel, id: String)</ID>
    <ID>FunctionNaming:Theme.kt$@Composable fun VLRTheme( darkTheme: Boolean = isSystemInDarkTheme(), dynamicColor: Boolean = true, content: @Composable () -&gt; Unit )</ID>
    <ID>FunctionNaming:Theme.kt$@Composable fun WidgetTheme( context: Context, darkTheme: Boolean = isSystemInDarkTheme(), dynamicColor: Boolean = true, content: @Composable () -&gt; Unit )</ID>
    <ID>FunctionNaming:UiElements.kt$@Composable fun CardView( modifier: Modifier = Modifier, colors: CardColors = CardDefaults.cardColors( contentColor = VLRTheme.colorScheme.onPrimaryContainer, containerColor = VLRTheme.colorScheme.primaryContainer.copy(cardAlpha) ), content: @Composable ColumnScope.() -&gt; Unit, )</ID>
    <ID>FunctionNaming:UiElements.kt$@Composable fun EmphasisCardView( modifier: Modifier = Modifier, content: @Composable ColumnScope.() -&gt; Unit, )</ID>
    <ID>FunctionNaming:VLR.kt$@Composable fun VLR()</ID>
    <ID>FunctionNaming:VLRCompositionProviders.kt$@Composable fun PaddingLocalCompositions(content: @Composable () -&gt; Unit)</ID>
    <ID>FunctionNaming:VlrHorizontalViewPager.kt$@Composable fun VlrHorizontalViewPager( modifier: Modifier, pagerState: PagerState, vararg contents: @Composable () -&gt; Unit )</ID>
    <ID>FunctionNaming:VlrNavBar.kt$@Composable fun VlrNavBar(navController: NavHostController, items: List&lt;NavItem&gt;, currentNav: String)</ID>
    <ID>FunctionNaming:VlrNavHost.kt$@Composable fun VlrNavHost(navController: NavHostController, onNavigation: (String) -&gt; Unit)</ID>
    <ID>FunctionNaming:VlrTabRow.kt$@Composable fun VlrScrollableTabRowForViewPager( modifier: Modifier, pagerState: PagerState, tabs: List&lt;String&gt; )</ID>
    <ID>FunctionNaming:VlrTabRow.kt$@Composable fun VlrTabRowForViewPager(modifier: Modifier, pagerState: PagerState, tabs: List&lt;String&gt;)</ID>
    <ID>FunctionNaming:VodsAndStreams.kt$@Composable fun VideoReferenceUi( modifier: Modifier = Modifier, videos: MatchInfo.Videos, )</ID>
    <ID>InstanceOfCheckForException:RunCatchingExtension.kt$e is CancellationException</ID>
    <ID>LongMethod:AboutScreen.kt$@Composable fun AndroidCard(modifier: Modifier = Modifier)</ID>
    <ID>LongMethod:EventDetailsScreen.kt$@Composable fun EventDetails(viewModel: VlrViewModel, id: String)</ID>
    <ID>LongMethod:EventDetailsScreen.kt$@Composable fun EventDetailsTeamSlider( modifier: Modifier = Modifier, list: StableHolder&lt;List&lt;TournamentDetails.Participant&gt;&gt;, onClick: (String) -&gt; Unit )</ID>
    <ID>LongMethod:EventDetailsScreen.kt$@Composable fun TournamentDetailsHeader( modifier: Modifier = Modifier, tournamentDetails: TournamentDetails, isTracked: Boolean, onSubButton: suspend () -&gt; Unit )</ID>
    <ID>LongMethod:EventDetailsScreen.kt$@Composable fun TournamentMatchOverview( modifier: Modifier = Modifier, game: TournamentDetails.Games, onClick: (String) -&gt; Unit )</ID>
    <ID>LongMethod:EventOverviewScreen.kt$@Composable fun TournamentPreview( modifier: Modifier = Modifier, tournamentPreview: TournamentPreview, action: Action )</ID>
    <ID>LongMethod:EventOverviewScreen.kt$@Composable fun TournamentPreviewContainer( modifier: Modifier = Modifier, action: Action, list: StableHolder&lt;List&lt;TournamentPreview&gt;&gt;, swipeRefresh: PullRefreshState, updateState: Result&lt;Boolean, Throwable?&gt;, resetScroll: Boolean, postResetScroll: () -&gt; Unit, )</ID>
    <ID>LongMethod:MatchDetailsScreen.kt$@Composable fun MatchOverallAndEventOverview( modifier: Modifier = Modifier, detailData: MatchInfo, onClick: (String) -&gt; Unit, )</ID>
    <ID>LongMethod:MatchDetailsScreen.kt$@Composable fun NewMatchDetails(viewModel: VlrViewModel, id: String)</ID>
    <ID>LongMethod:MatchOverviewScreen.kt$@Composable fun MatchOverviewContainer( modifier: Modifier = Modifier, list: StableHolder&lt;List&lt;MatchPreviewInfo&gt;&gt;, swipeRefresh: PullRefreshState, updateState: Result&lt;Boolean, Throwable?&gt;, resetScroll: Boolean, onClick: (String) -&gt; Unit, postResetScroll: () -&gt; Unit, )</ID>
    <ID>LongMethod:MatchOverviewScreen.kt$@Composable fun MatchOverviewPreview( modifier: Modifier = Modifier, matchPreviewInfo: MatchPreviewInfo, shareMode: Boolean, isSelected: Boolean, onAction: (Boolean, MatchPreviewInfo) -&gt; Unit, )</ID>
    <ID>LongMethod:MatchScoreUi.kt$@Composable fun ScoreBox(modifier: Modifier = Modifier, mapData: MatchInfo.MatchDetailData)</ID>
    <ID>LongMethod:MoreOptionsUi.kt$@Composable fun MatchInfoMoreOptions( detailData: MatchInfo, isTracked: Boolean, eventId: String, onSubButton: suspend () -&gt; Unit, onEventClick: (String) -&gt; Unit, )</ID>
    <ID>LongMethod:NewsDetailsScreen.kt$@Composable fun NewsDetailsScreen(viewModel: VlrViewModel, id: String)</ID>
    <ID>LongMethod:NewsOverviewScreen.kt$@Composable fun NewsScreen(viewModel: VlrViewModel)</ID>
    <ID>LongMethod:PlayerDetailsScreen.kt$@Composable fun PlayerDetailsScreen(viewModel: VlrViewModel, id: String)</ID>
    <ID>LongMethod:PlayerDetailsScreen.kt$@Composable fun PlayerHeaderUi(modifier: Modifier, playerData: PlayerData)</ID>
    <ID>LongMethod:RankScreen.kt$@Composable fun RanksPreviewContainer( modifier: Modifier = Modifier, action: Action, list: StableHolder&lt;List&lt;TeamDetails&gt;&gt;, swipeRefresh: PullRefreshState, updateState: Result&lt;Boolean, Throwable?&gt;, resetScroll: Boolean, postResetScroll: () -&gt; Unit, )</ID>
    <ID>LongMethod:RankScreen.kt$@Composable fun TeamRankPreview(modifier: Modifier = Modifier, team: TeamDetails, action: Action)</ID>
    <ID>LongMethod:ScoreWidget.kt$ScoreWidget$@Composable override fun Content()</ID>
    <ID>LongMethod:TeamDetailsScreen.kt$@Composable fun RosterCard( modifier: Modifier = Modifier, expanded: Boolean, data: StableHolder&lt;List&lt;TeamDetails.Roster&gt;&gt;, onExpand: (Boolean) -&gt; Unit, onClick: (String) -&gt; Unit, )</ID>
    <ID>LongMethod:TeamDetailsScreen.kt$@Composable fun TeamBanner( modifier: Modifier = Modifier, teamDetails: TeamDetails, id: String, isTracked: Boolean, onSubButton: suspend () -&gt; Unit )</ID>
    <ID>LongMethod:TeamDetailsScreen.kt$@Composable fun TeamScreen(viewModel: VlrViewModel, id: String)</ID>
    <ID>LongMethod:VLR.kt$@Composable fun VLR()</ID>
    <ID>LongMethod:VlrNavHost.kt$@Composable fun VlrNavHost(navController: NavHostController, onNavigation: (String) -&gt; Unit)</ID>
    <ID>LongMethod:VodsAndStreams.kt$@Composable fun VideoReferenceUi( modifier: Modifier = Modifier, videos: MatchInfo.Videos, )</ID>
    <ID>LongParameterList:EventDetailsScreen.kt$( modifier: Modifier = Modifier, selectedIndex: Int, group: StableHolder&lt;Map&lt;String, List&lt;TournamentDetails.Games&gt;&gt;&gt;, tabSelection: Int, onFilterChange: (Int) -&gt; Unit, onTabChange: (Int) -&gt; Unit )</ID>
    <ID>LongParameterList:EventOverviewScreen.kt$( modifier: Modifier = Modifier, action: Action, list: StableHolder&lt;List&lt;TournamentPreview&gt;&gt;, swipeRefresh: PullRefreshState, updateState: Result&lt;Boolean, Throwable?&gt;, resetScroll: Boolean, postResetScroll: () -&gt; Unit, )</ID>
    <ID>LongParameterList:MatchOverviewScreen.kt$( modifier: Modifier = Modifier, list: StableHolder&lt;List&lt;MatchPreviewInfo&gt;&gt;, swipeRefresh: PullRefreshState, updateState: Result&lt;Boolean, Throwable?&gt;, resetScroll: Boolean, onClick: (String) -&gt; Unit, postResetScroll: () -&gt; Unit, )</ID>
    <ID>LongParameterList:RankScreen.kt$( modifier: Modifier = Modifier, action: Action, list: StableHolder&lt;List&lt;TeamDetails&gt;&gt;, swipeRefresh: PullRefreshState, updateState: Result&lt;Boolean, Throwable?&gt;, resetScroll: Boolean, postResetScroll: () -&gt; Unit, )</ID>
    <ID>MagicNumber:AnimationUtil.kt$400</ID>
    <ID>MagicNumber:Color.kt$0xFF000000</ID>
    <ID>MagicNumber:Color.kt$0xFF1C1B1F</ID>
    <ID>MagicNumber:Color.kt$0xFF1D192B</ID>
    <ID>MagicNumber:Color.kt$0xFF21005D</ID>
    <ID>MagicNumber:Color.kt$0xFF31111D</ID>
    <ID>MagicNumber:Color.kt$0xFF313033</ID>
    <ID>MagicNumber:Color.kt$0xFF332D41</ID>
    <ID>MagicNumber:Color.kt$0xFF381E72</ID>
    <ID>MagicNumber:Color.kt$0xFF410E0B</ID>
    <ID>MagicNumber:Color.kt$0xFF492532</ID>
    <ID>MagicNumber:Color.kt$0xFF49454F</ID>
    <ID>MagicNumber:Color.kt$0xFF4A4458</ID>
    <ID>MagicNumber:Color.kt$0xFF4F378B</ID>
    <ID>MagicNumber:Color.kt$0xFF601410</ID>
    <ID>MagicNumber:Color.kt$0xFF625B71</ID>
    <ID>MagicNumber:Color.kt$0xFF633B48</ID>
    <ID>MagicNumber:Color.kt$0xFF6750A4</ID>
    <ID>MagicNumber:Color.kt$0xFF79747E</ID>
    <ID>MagicNumber:Color.kt$0xFF7D5260</ID>
    <ID>MagicNumber:Color.kt$0xFF8C1D18</ID>
    <ID>MagicNumber:Color.kt$0xFF938F99</ID>
    <ID>MagicNumber:Color.kt$0xFFB3261E</ID>
    <ID>MagicNumber:Color.kt$0xFFCAC4D0</ID>
    <ID>MagicNumber:Color.kt$0xFFCCC2DC</ID>
    <ID>MagicNumber:Color.kt$0xFFD0BCFF</ID>
    <ID>MagicNumber:Color.kt$0xFFE6E1E5</ID>
    <ID>MagicNumber:Color.kt$0xFFE7E0EC</ID>
    <ID>MagicNumber:Color.kt$0xFFE8DEF8</ID>
    <ID>MagicNumber:Color.kt$0xFFEADDFF</ID>
    <ID>MagicNumber:Color.kt$0xFFEFB8C8</ID>
    <ID>MagicNumber:Color.kt$0xFFF2B8B5</ID>
    <ID>MagicNumber:Color.kt$0xFFF4EFF4</ID>
    <ID>MagicNumber:Color.kt$0xFFF9DEDC</ID>
    <ID>MagicNumber:Color.kt$0xFFFFD8E4</ID>
    <ID>MagicNumber:Color.kt$0xFFFFFBFE</ID>
    <ID>MagicNumber:Color.kt$0xFFFFFFFF</ID>
    <ID>MagicNumber:DomainVerificationHelper.kt$30</ID>
    <ID>MagicNumber:EventDetailsScreen.kt$0.3f</ID>
    <ID>MagicNumber:MatchDetailsScreen.kt$0.1f</ID>
    <ID>MagicNumber:MatchDetailsScreen.kt$0.2f</ID>
    <ID>MagicNumber:MatchDetailsScreen.kt$1.8f</ID>
    <ID>MagicNumber:MatchDetailsScreen.kt$1000</ID>
    <ID>MagicNumber:MoreOptionsUi.kt$500</ID>
    <ID>MagicNumber:NewsDetailsScreen.kt$1.6f</ID>
    <ID>MagicNumber:NewsOverviewScreen.kt$3</ID>
    <ID>MagicNumber:ObsoleteRecordRemoverWorker.kt$12</ID>
    <ID>MagicNumber:PlayerDetailsScreen.kt$1.5f</ID>
    <ID>MagicNumber:PlayerDetailsScreen.kt$3</ID>
    <ID>MagicNumber:PlayerDetailsScreen.kt$50</ID>
    <ID>MagicNumber:PrintEvents.kt$PrintEvents.PrintingEventListener$1000000000.0</ID>
    <ID>MagicNumber:RankScreen.kt$25</ID>
    <ID>MagicNumber:ScoreWidget.kt$ScoreWidget$10</ID>
    <ID>MagicNumber:ShareMenuUi.kt$100</ID>
    <ID>MagicNumber:ShareMenuUi.kt$3f</ID>
    <ID>MagicNumber:StatsUi.kt$1.5f</ID>
    <ID>MagicNumber:StatsUi.kt$3</ID>
    <ID>MagicNumber:SystemBarComposition.kt$0.2f</ID>
    <ID>MagicNumber:TeamDetailsScreen.kt$500</ID>
    <ID>MagicNumber:TimeHelper.kt$24</ID>
    <ID>MagicNumber:TimeHelper.kt$60</ID>
    <ID>MagicNumber:UiElements.kt$0.3f</ID>
    <ID>MagicNumber:UiElements.kt$0.6f</ID>
    <ID>MagicNumber:VlrDB.kt$&lt;no name provided&gt;$7</ID>
    <ID>MagicNumber:VlrDB.kt$&lt;no name provided&gt;$8</ID>
    <ID>MagicNumber:VlrDB.kt$VlrDB$10</ID>
    <ID>MagicNumber:VlrDB.kt$VlrDB$9</ID>
    <ID>MagicNumber:VlrRepository.kt$VlrRepository$25</ID>
    <ID>MagicNumber:VodsAndStreams.kt$500</ID>
    <ID>MagicNumber:WidgetHelper.kt$15</ID>
    <ID>MatchingDeclarationName:DomainVerificationHelper.kt$DomainVerificationStatus</ID>
    <ID>MatchingDeclarationName:TournamentInfo.kt$TournamentPreview</ID>
    <ID>MaxLineLength:DomainVerificationUi.kt$text = if (android.os.Build.MANUFACTURER.equals("samsung", true)) stringResource(id = R.string.domain_verification_samsung_steps) else stringResource(id = R.string.domain_verification_steps)</ID>
    <ID>MaxLineLength:MatchScoreUi.kt$LazyRow</ID>
    <ID>MaxLineLength:NewsDetailsScreen.kt$if</ID>
    <ID>MaxLineLength:PlayerDetailsScreen.kt$if (pagerState.currentPage == iteration) VLRTheme.colorScheme.onPrimaryContainer else VLRTheme.colorScheme.primary</ID>
    <ID>MaxLineLength:PrintEvents.kt$PrintEvents$*</ID>
    <ID>MaxLineLength:ShareMenuUi.kt$"${it.team1.name} vs ${it.team2.name} | ${it.time?.readableDateAndTimeWithZone} | ${it.id.internalUrlFromId()} | ${it.id.websiteUrlFromId()}"</ID>
    <ID>MaxLineLength:StatsUi.kt$if (pagerState.currentPage == iteration) VLRTheme.colorScheme.onPrimaryContainer else VLRTheme.colorScheme.primary</ID>
    <ID>NewLineAtEndOfFile:MoreOptionsUi.kt$dev.staticvar.vlr.ui.match.details_ui.MoreOptionsUi.kt</ID>
    <ID>NewLineAtEndOfFile:PlayerData.kt$dev.staticvar.vlr.data.api.response.PlayerData.kt</ID>
    <ID>NewLineAtEndOfFile:UrlHelper.kt$dev.staticvar.vlr.utils.UrlHelper.kt</ID>
    <ID>PackageNaming:DomainVerificationUi.kt$package dev.staticvar.vlr.ui.match.details_ui</ID>
    <ID>PackageNaming:MatchDetailsScreen.kt$package dev.staticvar.vlr.ui.match.details_ui</ID>
    <ID>PackageNaming:MatchScoreUi.kt$package dev.staticvar.vlr.ui.match.details_ui</ID>
    <ID>PackageNaming:MoreDetailsDialogUi.kt$package dev.staticvar.vlr.ui.match.details_ui</ID>
    <ID>PackageNaming:MoreOptionsUi.kt$package dev.staticvar.vlr.ui.match.details_ui</ID>
    <ID>PackageNaming:PreviousEncounterUi.kt$package dev.staticvar.vlr.ui.match.details_ui</ID>
    <ID>PackageNaming:RankScreen.kt$package dev.staticvar.vlr.ui.team_rank</ID>
    <ID>PackageNaming:StatsUi.kt$package dev.staticvar.vlr.ui.match.details_ui</ID>
    <ID>PackageNaming:TeamDetailsScreen.kt$package dev.staticvar.vlr.ui.team_rank</ID>
    <ID>PackageNaming:VodsAndStreams.kt$package dev.staticvar.vlr.ui.match.details_ui</ID>
    <ID>PrintStackTrace:RunCatchingExtension.kt$e</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:Logger.kt$Logger$Throwable()</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:Operation.kt$Fail$NullPointerException()</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:Operation.kt$Pass$NullPointerException()</ID>
    <ID>TooGenericExceptionCaught:RunCatchingExtension.kt$e: Throwable</ID>
    <ID>TooManyFunctions:PrintEvents.kt$PrintEvents$PrintingEventListener : EventListener</ID>
    <ID>TooManyFunctions:VlrDao.kt$VlrDao</ID>
    <ID>TooManyFunctions:VlrRepository.kt$VlrRepository</ID>
    <ID>TooManyFunctions:VlrTypeConverter.kt$VlrTypeConverter</ID>
    <ID>TooManyFunctions:VlrViewModel.kt$VlrViewModel : ViewModel</ID>
    <ID>UnusedPrivateMember:TimeHelper.kt$private const val FULL_DATE_TIME_PATTERN_WITH_ZONE = "E, dd MMM yyyy HH:mm z"</ID>
  </CurrentIssues>
</SmellBaseline>
